//var Enum日期轉換 = Object.freeze({"日期與時間": 1, "日期": 2, "年份": 3});


function 月柱判斷(年干,月支){
    // 甲己之年丙作首，乙庚之歲戊為頭，丙辛必定尋庚起，丁壬壬位順行流，若問戊癸何方發，甲寅之上好追求
    // 五虎遁元的規律：甲己合土，火生土，所以為丙。乙庚化金，土生金，所以為戊。丙辛合水，金生水，所以為庚。丁壬合木，水生木，所以為壬。戊癸合火，所以為甲。
    // 命宮判斷通用 ！！
    var 五虎遁 = (2 * 天干字轉值(年干) + 1) % 10;
    var 月支數=地支字轉值(月支);
    var 地支轉數 = ((月支數 - 3)>=0)?月支數 - 3:月支數 - 3+12;
    var 月干 = 天干數轉字(天干滾動(五虎遁, 地支轉數));

    return 月干 + 地支數轉字(月支數);
}

function 時柱判斷(日干,時支){

    var 天干基數,時柱天干,時柱地支;

    switch (時支) {
        case "早子":
            時柱地支 = 地支字轉值(時支.substr(1, 1));
            運算天干=日干;
            break;
        case "夜子":
            時柱地支 = 地支字轉值(時支.substr(1, 1));
            var 運算天干=天干字數轉換(天干滾動(天干字轉值(日干),1));
            break;
        case "丑": case "寅": case "卯": case "辰": case "巳": case "午": case "未": case "申": case "酉": case "戌": case "亥":
            時柱地支 = 地支字轉值(時支);
            運算天干=日干;
            break;
    }

    //五鼠遁：甲己還加甲，乙庚是丙初，丙辛從戊起，丁壬居庚子，戊癸在何方，壬子是真途
    switch(運算天干){
        case "甲":
        case "己":
            天干基數=1;
            break;
        case "乙":
        case "庚":
            天干基數=3;
            break;
        case "丙":
        case "辛":
            天干基數=5;
            break;
        case "丁":
        case "壬":
            天干基數=7;
            break;
        case "戊":
        case "癸":
            天干基數=9;
            break;
    }            

    地支基數 = 地支滾動(時柱地支,-1);
    時柱天干=天干滾動(天干基數,地支基數);
    //return 天干值轉換屬性(時柱天干,1)+地支值轉換屬性(時柱地支,1);
    return 天干字數轉換(時柱天干)+地支字數轉換(時柱地支);
}


function 西曆轉換(輸入西曆日期) {
    /**
    曆法轉換：輸入西曆日期, 年月日時，JS valid date type，
    選項：Enum曆法：1 - 干支曆法，2 - 農曆，3 - 陰曆
    **/
    //var TestDate = new Date(1972,7,29,10,30);
    
    var 曆法數據 = 萬年曆();

    var 西曆年, 西曆月, 西曆日, 西曆時, 西曆分;
    var 干支年, 干支月, 干支日, 干支時;
    var 節, 節日期, 距離節的天數, 節氣, 節氣時段, 節氣數, 下個節氣日期, 上個節氣日期,下個節氣時差, 上個節氣時差,當天是交節日, 本季交節日, 本季末日,時支;

    西曆年 = 輸入西曆日期.getFullYear();
    西曆月 = 輸入西曆日期.getMonth(); // 比真實生月小一個月
    西曆日 = 輸入西曆日期.getDate();
    西曆時 = 輸入西曆日期.getHours();
    西曆分 = 輸入西曆日期.getMinutes();
    西曆秒 = 輸入西曆日期.getSeconds();
    
    var YearData = 西曆年 - 1923;
    var 立春年數 = 曆法數據[YearData].立春年干支數;
    var 立春月數 = 曆法數據[YearData].立春月干支數;
    var 立春日數 = 曆法數據[YearData].立春日干支數;

    var 輸入日期 = new Date(西曆年, 西曆月, 西曆日,0,0,0,0);
    var 輸入時間 = 西曆時 + ":" + 西曆分 + ":" + "00";

    var 立春日期 = 日期值轉換(曆法數據[YearData].立春, 2); //立春日期而已，不含時間
    //var 距離立春日 = DateDiff(立春日期, 輸入日期, "days");
    var 距離立春日 = momentDateDiff(輸入日期, 立春日期);

    //$("#debuginfo").html("立春: " +立春日期+", 距離立春: " +距離立春日);

    當天是交節日 = false;

    if(輸入西曆日期 < 日期值轉換(曆法數據[YearData].小寒, 1)) {
        節氣 = "冬至";
		節氣數 = 21;
        節氣時段 = "冬至後，小寒前";
        節 = "大雪";
        節日期 = 日期值轉換(曆法數據[YearData-1].大雪, 1);
        //距離節的天數=DateDiff(節日期,輸入西曆日期,"days");
        距離節的天數 = momentDateDiff(輸入西曆日期, 節日期);

        //alert(節氣+": "+ 節日期 + " / " + "生日：" + 輸入西曆日期);
        下個節氣日期 = 日期值轉換(曆法數據[YearData].小寒, 1); //Enum日期轉換.日期與時間
        上個節氣日期 = 日期值轉換(曆法數據[YearData - 1].大雪, 1); //去年
        //下個節氣時差=DateDiff(輸入西曆日期, 下個節氣日期,"hours");
        //上個節氣時差=DateDiff(上個節氣日期,輸入西曆日期,"hours");
        下個節氣時差 = momentDateDiff(下個節氣日期, 輸入西曆日期, "hours");
        上個節氣時差 = momentDateDiff(輸入西曆日期, 上個節氣日期, "hours");
        
        本季末日 = 日期值轉換(曆法數據[YearData].小寒, 1);

        本季交節日 = new Date(下個節氣日期);
        本季交節日.setHours(0, 0, 0, 0); //去掉時間
        當天是交節日 = (輸入日期.valueOf() == 本季交節日.valueOf()) ? true : false;

        干支年 = 干支滾動(立春年數, -1);
        干支月 = 干支滾動(立春月數, -2);
        干支日 = 干支滾動(立春日數, 距離立春日);

    } else if ((輸入西曆日期>=日期值轉換(曆法數據[YearData].小寒, 1)) && (輸入西曆日期<日期值轉換(曆法數據[YearData].大寒, 1))) {
        節氣 = "小寒";
		節氣數 = 22;
        節氣時段 = "小寒後，大寒前";
        節 = "小寒";
        節日期 = 日期值轉換(曆法數據[YearData].小寒, 1);
        //距離節的天數=DateDiff(節日期,輸入西曆日期,"days");
        距離節的天數 = momentDateDiff(輸入西曆日期, 節日期);

        //alert(節氣+": "+ 節日期 + " / " + "生日：" + 輸入西曆日期);
        下個節氣日期 = 日期值轉換(曆法數據[YearData].立春, 1);
        上個節氣日期 = 日期值轉換(曆法數據[YearData].小寒, 1);

        //下個節氣時差=DateDiff(輸入西曆日期,下個節氣日期,"hours");
        //上個節氣時差=DateDiff(上個節氣日期,輸入西曆日期,"hours");
        下個節氣時差 = momentDateDiff(下個節氣日期, 輸入西曆日期, "hours");
        上個節氣時差 = momentDateDiff(輸入西曆日期, 上個節氣日期, "hours");
        本季末日 = 日期值轉換(曆法數據[YearData].大寒, 1);

        本季交節日 = new Date(上個節氣日期);
        本季交節日.setHours(0, 0, 0, 0); //去掉時間
        當天是交節日 = 輸入日期.valueOf() == 本季交節日.valueOf() ? true : false;

        干支年 = 干支滾動(立春年數, -1);
        干支月 = 干支滾動(立春月數, -1);
        干支日 = 干支滾動(立春日數, 距離立春日);

    } else if ((輸入西曆日期>=日期值轉換(曆法數據[YearData].大寒, 1)) && (輸入西曆日期<日期值轉換(曆法數據[YearData].立春, 1))) {
        節氣 = "大寒";
		節氣數 = 23;
        節氣時段 = "大寒後，立春前";
        節 = "小寒";
        節日期 = 日期值轉換(曆法數據[YearData].小寒, 1);
        //距離節的天數=DateDiff(節日期,輸入西曆日期,"days");
        距離節的天數 = momentDateDiff(輸入西曆日期, 節日期);

        下個節氣日期 = 日期值轉換(曆法數據[YearData].立春, 1);
        上個節氣日期 = 日期值轉換(曆法數據[YearData].小寒, 1);
        //下個節氣時差=DateDiff(輸入西曆日期,下個節氣日期,"hours");
        //上個節氣時差=DateDiff(上個節氣日期,輸入西曆日期,"hours");
        下個節氣時差 = momentDateDiff(下個節氣日期, 輸入西曆日期, "hours");
        上個節氣時差 = momentDateDiff(輸入西曆日期, 上個節氣日期, "hours");
        本季末日 = 日期值轉換(曆法數據[YearData].立春, 1);

        本季交節日 = new Date(下個節氣日期);
        本季交節日.setHours(0, 0, 0, 0); //去掉時間
        當天是交節日 = 輸入日期.valueOf() == 本季交節日.valueOf() ? true : false;

        干支年 = 干支滾動(立春年數, -1);
        干支月 = 干支滾動(立春月數, -1);
        干支日 = 干支滾動(立春日數, 距離立春日);
           
    } else if ((輸入西曆日期>=日期值轉換(曆法數據[YearData].立春, 1)) && (輸入西曆日期<日期值轉換(曆法數據[YearData].雨水, 1))) {
        節氣 = "立春";
		節氣數 = 0;
        節氣時段 = "立春後，雨水前";
        節 = "立春";
        節日期 = 日期值轉換(曆法數據[YearData].立春, 1);
        //距離節的天數=DateDiff(節日期,輸入西曆日期,"days");
        距離節的天數 = momentDateDiff(輸入西曆日期, 節日期);

        下個節氣日期 = 日期值轉換(曆法數據[YearData].驚蟄, 1);
        上個節氣日期 = 日期值轉換(曆法數據[YearData].立春, 1);
        //下個節氣時差=DateDiff(輸入西曆日期,下個節氣日期,"hours");
        //上個節氣時差=DateDiff(上個節氣日期,輸入西曆日期,"hours");
        下個節氣時差 = momentDateDiff(下個節氣日期, 輸入西曆日期, "hours");
        上個節氣時差 = momentDateDiff(輸入西曆日期, 上個節氣日期, "hours");
        本季末日 = 日期值轉換(曆法數據[YearData].雨水, 1);

        本季交節日 = new Date(上個節氣日期);
        本季交節日.setHours(0, 0, 0, 0); //去掉時間
        當天是交節日 = 輸入日期.valueOf() == 本季交節日.valueOf() ? true : false;

        干支年 = 干支滾動(立春年數, 0);
        干支月 = 干支滾動(立春月數, 0);
        干支日 = 干支滾動(立春日數, 距離立春日);

    } else if ((輸入西曆日期>=日期值轉換(曆法數據[YearData].雨水, 1)) && (輸入西曆日期<日期值轉換(曆法數據[YearData].驚蟄, 1))) {
        節氣 = "雨水";
		節氣數 = 1;
        節氣時段 = "雨水後，驚蟄前";
        節 = "立春";
        節日期 = 日期值轉換(曆法數據[YearData].立春, 1);
        //距離節的天數=DateDiff(節日期,輸入西曆日期,"days");
        距離節的天數 = momentDateDiff(輸入西曆日期, 節日期);

        下個節氣日期 = 日期值轉換(曆法數據[YearData].驚蟄, 1);
        上個節氣日期 = 日期值轉換(曆法數據[YearData].立春, 1);
        //下個節氣時差=DateDiff(輸入西曆日期,下個節氣日期,"hours");
        //上個節氣時差=DateDiff(上個節氣日期,輸入西曆日期,"hours");
        下個節氣時差 = momentDateDiff(下個節氣日期, 輸入西曆日期, "hours");
        上個節氣時差 = momentDateDiff(輸入西曆日期, 上個節氣日期, "hours");
        本季末日 = 日期值轉換(曆法數據[YearData].驚蟄, 1);

        本季交節日 = new Date(下個節氣日期);
        本季交節日.setHours(0, 0, 0, 0); //去掉時間
        當天是交節日 = 輸入日期.valueOf() == 本季交節日.valueOf() ? true : false;

        干支年 = 干支滾動(立春年數, 0);
        干支月 = 干支滾動(立春月數, 0);
        干支日 = 干支滾動(立春日數, 距離立春日);

    } else if ((輸入西曆日期>=日期值轉換(曆法數據[YearData].驚蟄, 1)) && (輸入西曆日期<日期值轉換(曆法數據[YearData].春分, 1))) {
        節氣 = "驚蟄";
		節氣數 = 2;
        節氣時段 = "驚蟄後，春分前";
        節 = "驚蟄";
        節日期 = 日期值轉換(曆法數據[YearData].驚蟄, 1);
        //距離節的天數=DateDiff(節日期,輸入西曆日期,"days");
        距離節的天數 = momentDateDiff(輸入西曆日期, 節日期);
        下個節氣日期 = 日期值轉換(曆法數據[YearData].清明, 1);
        上個節氣日期 = 日期值轉換(曆法數據[YearData].驚蟄, 1);
        //下個節氣時差=DateDiff(輸入西曆日期,下個節氣日期,"hours");
        //上個節氣時差=DateDiff(上個節氣日期,輸入西曆日期,"hours");
        下個節氣時差 = momentDateDiff(下個節氣日期, 輸入西曆日期, "hours");
        上個節氣時差 = momentDateDiff(輸入西曆日期, 上個節氣日期, "hours");
        本季末日 = 日期值轉換(曆法數據[YearData].春分, 1);

        本季交節日 = new Date(上個節氣日期);
        本季交節日.setHours(0, 0, 0, 0); //去掉時間
        當天是交節日 = 輸入日期.valueOf() == 本季交節日.valueOf() ? true : false;

        干支年 = 干支滾動(立春年數, 0);
        干支月 = 干支滾動(立春月數, 1);
        干支日 = 干支滾動(立春日數, 距離立春日);

    } else if ((輸入西曆日期>=日期值轉換(曆法數據[YearData].春分, 1)) && (輸入西曆日期<日期值轉換(曆法數據[YearData].清明, 1))) {
        節氣 = "春分";
		節氣數 = 3;
        節氣時段 = "春分後，清明前";
        節 = "驚蟄";
        節日期 = 日期值轉換(曆法數據[YearData].驚蟄, 1);
        //距離節的天數=DateDiff(節日期,輸入西曆日期,"days");
        距離節的天數 = momentDateDiff(輸入西曆日期, 節日期);
        下個節氣日期 = 日期值轉換(曆法數據[YearData].清明, 1);
        上個節氣日期 = 日期值轉換(曆法數據[YearData].驚蟄, 1);
        //下個節氣時差=DateDiff(輸入西曆日期,下個節氣日期,"hours");
        //上個節氣時差=DateDiff(上個節氣日期,輸入西曆日期,"hours");
        下個節氣時差 = momentDateDiff(下個節氣日期, 輸入西曆日期, "hours");
        上個節氣時差 = momentDateDiff(輸入西曆日期, 上個節氣日期, "hours");
        本季末日 = 日期值轉換(曆法數據[YearData].清明, 1);

        本季交節日 = new Date(下個節氣日期);
        本季交節日.setHours(0, 0, 0, 0); //去掉時間
        當天是交節日 = 輸入日期.valueOf() == 本季交節日.valueOf() ? true : false;

        干支年 = 干支滾動(立春年數, 0);
        干支月 = 干支滾動(立春月數, 1);
        干支日 = 干支滾動(立春日數, 距離立春日);

    } else if ((輸入西曆日期>=日期值轉換(曆法數據[YearData].清明, 1)) && (輸入西曆日期<日期值轉換(曆法數據[YearData].穀雨, 1))) {
        節氣 = "清明";
		節氣數 = 4;
        節氣時段 = "清明後，穀雨前";
        節 = "清明";
        節日期 = 日期值轉換(曆法數據[YearData].清明, 1);
        //距離節的天數=DateDiff(節日期,輸入西曆日期,"days");
        距離節的天數 = momentDateDiff(輸入西曆日期, 節日期);
        下個節氣日期 = 日期值轉換(曆法數據[YearData].立夏, 1);
        上個節氣日期 = 日期值轉換(曆法數據[YearData].清明, 1);
        //下個節氣時差=DateDiff(輸入西曆日期,下個節氣日期,"hours");
        //上個節氣時差=DateDiff(上個節氣日期,輸入西曆日期,"hours");
        下個節氣時差 = momentDateDiff(下個節氣日期, 輸入西曆日期, "hours");
        上個節氣時差 = momentDateDiff(輸入西曆日期, 上個節氣日期, "hours");
        本季末日 = 日期值轉換(曆法數據[YearData].穀雨, 1);

        本季交節日 = new Date(上個節氣日期);
        本季交節日.setHours(0, 0, 0, 0); //去掉時間
        當天是交節日 = 輸入日期.valueOf() == 本季交節日.valueOf() ? true : false;

        干支年 = 干支滾動(立春年數, 0);
        干支月 = 干支滾動(立春月數, 2);
        干支日 = 干支滾動(立春日數, 距離立春日);

    } else if ((輸入西曆日期>=日期值轉換(曆法數據[YearData].穀雨, 1)) && (輸入西曆日期<日期值轉換(曆法數據[YearData].立夏, 1))) {
        節氣 = "穀雨";
		節氣數 = 5;
        節氣時段 = "穀雨後，立夏前";
        節 = "清明";
        節日期 = 日期值轉換(曆法數據[YearData].清明, 1);
        //距離節的天數=DateDiff(節日期,輸入西曆日期,"days");
        距離節的天數 = momentDateDiff(輸入西曆日期, 節日期);
        下個節氣日期 = 日期值轉換(曆法數據[YearData].立夏, 1);
        上個節氣日期 = 日期值轉換(曆法數據[YearData].清明, 1);
        //下個節氣時差=DateDiff(輸入西曆日期,下個節氣日期,"hours");
        //上個節氣時差=DateDiff(上個節氣日期,輸入西曆日期,"hours");
        下個節氣時差 = momentDateDiff(下個節氣日期, 輸入西曆日期, "hours");
        上個節氣時差 = momentDateDiff(輸入西曆日期, 上個節氣日期, "hours");
        本季末日 = 日期值轉換(曆法數據[YearData].立夏, 1);

        本季交節日 = new Date(下個節氣日期);
        本季交節日.setHours(0, 0, 0, 0); //去掉時間
        當天是交節日 = 輸入日期.valueOf() == 本季交節日.valueOf() ? true : false;

        干支年 = 干支滾動(立春年數, 0);
        干支月 = 干支滾動(立春月數, 2);
        干支日 = 干支滾動(立春日數, 距離立春日);

    } else if ((輸入西曆日期>=日期值轉換(曆法數據[YearData].立夏, 1)) && (輸入西曆日期<日期值轉換(曆法數據[YearData].小滿, 1))) {
        節氣 = "立夏";
		節氣數 = 6;
        節氣時段 = "立夏後，小滿前";
        節 = "立夏";
        節日期 = 日期值轉換(曆法數據[YearData].立夏, 1);
        //距離節的天數=DateDiff(節日期,輸入西曆日期,"days");
        距離節的天數 = momentDateDiff(輸入西曆日期, 節日期);
        下個節氣日期 = 日期值轉換(曆法數據[YearData].芒種, 1);
        上個節氣日期 = 日期值轉換(曆法數據[YearData].立夏, 1);
        //下個節氣時差=DateDiff(輸入西曆日期,下個節氣日期,"hours");
        //上個節氣時差=DateDiff(上個節氣日期,輸入西曆日期,"hours");
        下個節氣時差 = momentDateDiff(下個節氣日期, 輸入西曆日期, "hours");
        上個節氣時差 = momentDateDiff(輸入西曆日期, 上個節氣日期, "hours");
        本季末日 = 日期值轉換(曆法數據[YearData].小滿, 1);

        本季交節日 = new Date(上個節氣日期);
        本季交節日.setHours(0, 0, 0, 0); //去掉時間
        當天是交節日 = 輸入日期.valueOf() == 本季交節日.valueOf() ? true : false;

        干支年 = 干支滾動(立春年數, 0);
        干支月 = 干支滾動(立春月數, 3);
        干支日 = 干支滾動(立春日數, 距離立春日);

    } else if ((輸入西曆日期>=日期值轉換(曆法數據[YearData].小滿, 1)) && (輸入西曆日期<日期值轉換(曆法數據[YearData].芒種, 1))) {
        節氣 = "小滿";
		節氣數 = 7;
        節氣時段 = "小滿後，芒種前";
        節 = "立夏";
        節日期 = 日期值轉換(曆法數據[YearData].立夏, 1);
        //距離節的天數=DateDiff(節日期,輸入西曆日期,"days");
        距離節的天數 = momentDateDiff(輸入西曆日期, 節日期);
        下個節氣日期 = 日期值轉換(曆法數據[YearData].芒種, 1);
        上個節氣日期 = 日期值轉換(曆法數據[YearData].立夏, 1);
        //下個節氣時差=DateDiff(輸入西曆日期,下個節氣日期,"hours");
        //上個節氣時差=DateDiff(上個節氣日期,輸入西曆日期,"hours");
        下個節氣時差 = momentDateDiff(下個節氣日期, 輸入西曆日期, "hours");
        上個節氣時差 = momentDateDiff(輸入西曆日期, 上個節氣日期, "hours");
        本季末日 = 日期值轉換(曆法數據[YearData].芒種, 1);

        本季交節日 = new Date(下個節氣日期);
        本季交節日.setHours(0, 0, 0, 0); //去掉時間
        當天是交節日 = 輸入日期.valueOf() == 本季交節日.valueOf() ? true : false;

        干支年 = 干支滾動(立春年數, 0);
        干支月 = 干支滾動(立春月數, 3);
        干支日 = 干支滾動(立春日數, 距離立春日);

    } else if ((輸入西曆日期>=日期值轉換(曆法數據[YearData].芒種, 1)) && (輸入西曆日期<日期值轉換(曆法數據[YearData].夏至, 1))) {
        節氣 = "芒種";
		節氣數 = 8;
        節氣時段 = "芒種後，夏至前";
        節 = "芒種";
        節日期 = 日期值轉換(曆法數據[YearData].芒種, 1);
        //距離節的天數=DateDiff(節日期,輸入西曆日期,"days");
        距離節的天數 = momentDateDiff(輸入西曆日期, 節日期);
        下個節氣日期 = 日期值轉換(曆法數據[YearData].小暑, 1);
        上個節氣日期 = 日期值轉換(曆法數據[YearData].芒種, 1);
        //下個節氣時差=DateDiff(輸入西曆日期,下個節氣日期,"hours");
        //上個節氣時差=DateDiff(上個節氣日期,輸入西曆日期,"hours");
        下個節氣時差 = momentDateDiff(下個節氣日期, 輸入西曆日期, "hours");
        上個節氣時差 = momentDateDiff(輸入西曆日期, 上個節氣日期, "hours");
        本季末日 = 日期值轉換(曆法數據[YearData].夏至, 1);

        本季交節日 = new Date(上個節氣日期);
        本季交節日.setHours(0, 0, 0, 0); //去掉時間
        當天是交節日 = 輸入日期.valueOf() == 本季交節日.valueOf() ? true : false;

        干支年 = 干支滾動(立春年數, 0);
        干支月 = 干支滾動(立春月數, 4);
        干支日 = 干支滾動(立春日數, 距離立春日);

    } else if ((輸入西曆日期>=日期值轉換(曆法數據[YearData].夏至, 1)) && (輸入西曆日期<日期值轉換(曆法數據[YearData].小暑, 1))) {
        節氣 = "夏至";
		節氣數 = 9;
        節氣時段 = "夏至後，小暑前";
        節 = "芒種";
        節日期 = 日期值轉換(曆法數據[YearData].芒種, 1);
        //距離節的天數=DateDiff(節日期,輸入西曆日期,"days");
        距離節的天數 = momentDateDiff(輸入西曆日期, 節日期);
        下個節氣日期 = 日期值轉換(曆法數據[YearData].小暑, 1);
        上個節氣日期 = 日期值轉換(曆法數據[YearData].芒種, 1);
        //下個節氣時差=DateDiff(輸入西曆日期,下個節氣日期,"hours");
        //上個節氣時差=DateDiff(上個節氣日期,輸入西曆日期,"hours");
        下個節氣時差 = momentDateDiff(下個節氣日期, 輸入西曆日期, "hours");
        上個節氣時差 = momentDateDiff(輸入西曆日期, 上個節氣日期, "hours");
        本季末日 = 日期值轉換(曆法數據[YearData].小暑, 1);

        本季交節日 = new Date(下個節氣日期);
        本季交節日.setHours(0, 0, 0, 0); //去掉時間
        當天是交節日 = 輸入日期.valueOf() == 本季交節日.valueOf() ? true : false;

        干支年 = 干支滾動(立春年數, 0);
        干支月 = 干支滾動(立春月數, 4);
        干支日 = 干支滾動(立春日數, 距離立春日);

    } else if ((輸入西曆日期>=日期值轉換(曆法數據[YearData].小暑, 1)) && (輸入西曆日期<日期值轉換(曆法數據[YearData].大暑, 1))) {
        節氣 = "小暑";
		節氣數 = 10;
        節氣時段 = "小暑後，大暑前";
        節 = "小暑";
        節日期 = 日期值轉換(曆法數據[YearData].小暑, 1);
        //距離節的天數=DateDiff(節日期,輸入西曆日期,"days");
        距離節的天數 = momentDateDiff(輸入西曆日期, 節日期);
        下個節氣日期 = 日期值轉換(曆法數據[YearData].立秋, 1);
        上個節氣日期 = 日期值轉換(曆法數據[YearData].小暑, 1);
        //下個節氣時差=DateDiff(輸入西曆日期,下個節氣日期,"hours");
        //上個節氣時差=DateDiff(上個節氣日期,輸入西曆日期,"hours");
        下個節氣時差 = momentDateDiff(下個節氣日期, 輸入西曆日期, "hours");
        上個節氣時差 = momentDateDiff(輸入西曆日期, 上個節氣日期, "hours");
        本季末日 = 日期值轉換(曆法數據[YearData].大暑, 1);

        本季交節日 = new Date(上個節氣日期);
        本季交節日.setHours(0, 0, 0, 0); //去掉時間
        當天是交節日 = 輸入日期.valueOf() == 本季交節日.valueOf() ? true : false;

        干支年 = 干支滾動(立春年數, 0);
        干支月 = 干支滾動(立春月數, 5);
        干支日 = 干支滾動(立春日數, 距離立春日);

    } else if ((輸入西曆日期>=日期值轉換(曆法數據[YearData].大暑, 1)) && (輸入西曆日期<日期值轉換(曆法數據[YearData].立秋, 1))) {
        節氣 = "大暑";
		節氣數 = 11;
        節氣時段 = "大暑後，立秋前";
        節 = "小暑";
        節日期 = 日期值轉換(曆法數據[YearData].小暑, 1);
        //距離節的天數=DateDiff(節日期,輸入西曆日期,"days");
        距離節的天數 = momentDateDiff(輸入西曆日期, 節日期);
        下個節氣日期 = 日期值轉換(曆法數據[YearData].立秋, 1);
        上個節氣日期 = 日期值轉換(曆法數據[YearData].小暑, 1);
        //下個節氣時差=DateDiff(輸入西曆日期,下個節氣日期,"hours");
        //上個節氣時差=DateDiff(上個節氣日期,輸入西曆日期,"hours");
        下個節氣時差 = momentDateDiff(下個節氣日期, 輸入西曆日期, "hours");
        上個節氣時差 = momentDateDiff(輸入西曆日期, 上個節氣日期, "hours");
        本季末日 = 日期值轉換(曆法數據[YearData].立秋, 1);

        本季交節日 = new Date(下個節氣日期);
        本季交節日.setHours(0, 0, 0, 0); //去掉時間
        當天是交節日 = 輸入日期.valueOf() == 本季交節日.valueOf() ? true : false;

        干支年 = 干支滾動(立春年數, 0);
        干支月 = 干支滾動(立春月數, 5);
        干支日 = 干支滾動(立春日數, 距離立春日);

    } else if ((輸入西曆日期>=日期值轉換(曆法數據[YearData].立秋, 1)) && (輸入西曆日期<日期值轉換(曆法數據[YearData].處暑, 1))) {
        節氣 = "立秋";
		節氣數 = 12;
        節氣時段 = "立秋後，處暑前";
        節 = "立秋";
        節日期 = 日期值轉換(曆法數據[YearData].立秋, 1);
        //距離節的天數=DateDiff(節日期,輸入西曆日期,"days");
        距離節的天數 = momentDateDiff(輸入西曆日期, 節日期);
        下個節氣日期 = 日期值轉換(曆法數據[YearData].白露, 1);
        上個節氣日期 = 日期值轉換(曆法數據[YearData].立秋, 1);
        //下個節氣時差=DateDiff(輸入西曆日期,下個節氣日期,"hours");
        //上個節氣時差=DateDiff(上個節氣日期,輸入西曆日期,"hours");
        下個節氣時差 = momentDateDiff(下個節氣日期, 輸入西曆日期, "hours");
        上個節氣時差 = momentDateDiff(輸入西曆日期, 上個節氣日期, "hours");
        本季末日 = 日期值轉換(曆法數據[YearData].處暑, 1);

        本季交節日 = new Date(上個節氣日期);
        本季交節日.setHours(0, 0, 0, 0); //去掉時間
        當天是交節日 = 輸入日期.valueOf() == 本季交節日.valueOf() ? true : false;

        干支年 = 干支滾動(立春年數, 0);
        干支月 = 干支滾動(立春月數, 6);
        干支日 = 干支滾動(立春日數, 距離立春日);

    } else if ((輸入西曆日期>=日期值轉換(曆法數據[YearData].處暑, 1)) && (輸入西曆日期<日期值轉換(曆法數據[YearData].白露, 1))) {
        節氣 = "處暑";
		節氣數 = 13;
        節氣時段 = "處暑後，白露前";
        節 = "立秋";
        節日期 = 日期值轉換(曆法數據[YearData].立秋, 1);
        //距離節的天數=DateDiff(節日期,輸入西曆日期,"days");
        距離節的天數 = momentDateDiff(輸入西曆日期, 節日期);
        下個節氣日期 = 日期值轉換(曆法數據[YearData].白露, 1);
        上個節氣日期 = 日期值轉換(曆法數據[YearData].立秋, 1);
        //下個節氣時差=DateDiff(輸入西曆日期,下個節氣日期,"hours");
        //上個節氣時差=DateDiff(上個節氣日期,輸入西曆日期,"hours");
        下個節氣時差 = momentDateDiff(下個節氣日期, 輸入西曆日期, "hours");
        上個節氣時差 = momentDateDiff(輸入西曆日期, 上個節氣日期, "hours");
        本季末日 = 日期值轉換(曆法數據[YearData].白露, 1);

        本季交節日 = new Date(下個節氣日期);
        本季交節日.setHours(0, 0, 0, 0); //去掉時間
        當天是交節日 = 輸入日期.valueOf() == 本季交節日.valueOf() ? true : false;

        干支年 = 干支滾動(立春年數, 0);
        干支月 = 干支滾動(立春月數, 6);
        干支日 = 干支滾動(立春日數, 距離立春日);

    } else if ((輸入西曆日期>=日期值轉換(曆法數據[YearData].白露, 1)) && (輸入西曆日期<日期值轉換(曆法數據[YearData].秋分, 1))) {
        節氣 = "白露";
		節氣數 = 14;
        節氣時段 = "白露後，秋分前";
        節 = "白露";
        節日期 = 日期值轉換(曆法數據[YearData].白露, 1);
        //距離節的天數=DateDiff(節日期,輸入西曆日期,"days");
        距離節的天數 = momentDateDiff(輸入西曆日期, 節日期);
        下個節氣日期 = 日期值轉換(曆法數據[YearData].寒露, 1);
        上個節氣日期 = 日期值轉換(曆法數據[YearData].白露, 1);
        //下個節氣時差=DateDiff(輸入西曆日期,下個節氣日期,"hours");
        //上個節氣時差=DateDiff(上個節氣日期,輸入西曆日期,"hours");
        下個節氣時差 = momentDateDiff(下個節氣日期, 輸入西曆日期, "hours");
        上個節氣時差 = momentDateDiff(輸入西曆日期, 上個節氣日期, "hours");
        本季末日 = 日期值轉換(曆法數據[YearData].秋分, 1);

        本季交節日 = new Date(上個節氣日期);
        本季交節日.setHours(0, 0, 0, 0); //去掉時間
        當天是交節日 = 輸入日期.valueOf() == 本季交節日.valueOf() ? true : false;

        干支年 = 干支滾動(立春年數, 0);
        干支月 = 干支滾動(立春月數, 7);
        干支日 = 干支滾動(立春日數, 距離立春日);

    } else if ((輸入西曆日期>=日期值轉換(曆法數據[YearData].秋分, 1)) && (輸入西曆日期<日期值轉換(曆法數據[YearData].寒露, 1))) {
        節氣 = "秋分";
		節氣數 = 15;
        節氣時段 = "秋分後，寒露前";
        節 = "白露";
        節日期 = 日期值轉換(曆法數據[YearData].白露, 1);
        //距離節的天數=DateDiff(節日期,輸入西曆日期,"days");
        距離節的天數 = momentDateDiff(輸入西曆日期, 節日期);
        下個節氣日期 = 日期值轉換(曆法數據[YearData].寒露, 1);
        上個節氣日期 = 日期值轉換(曆法數據[YearData].白露, 1);
        //下個節氣時差=DateDiff(輸入西曆日期,下個節氣日期,"hours");
        //上個節氣時差=DateDiff(上個節氣日期,輸入西曆日期,"hours");
        下個節氣時差 = momentDateDiff(下個節氣日期, 輸入西曆日期, "hours");
        上個節氣時差 = momentDateDiff(輸入西曆日期, 上個節氣日期, "hours");
        本季末日 = 日期值轉換(曆法數據[YearData].寒露, 1);

        本季交節日 = new Date(下個節氣日期);
        本季交節日.setHours(0, 0, 0, 0); //去掉時間
        當天是交節日 = 輸入日期.valueOf() == 本季交節日.valueOf() ? true : false;

        干支年 = 干支滾動(立春年數, 0);
        干支月 = 干支滾動(立春月數, 7);
        干支日 = 干支滾動(立春日數, 距離立春日);

    } else if ((輸入西曆日期>=日期值轉換(曆法數據[YearData].寒露, 1)) && (輸入西曆日期<日期值轉換(曆法數據[YearData].霜降, 1))) {
        節氣 = "寒露";
		節氣數 = 16;
        節氣時段 = "寒露後，霜降前";
        節 = "寒露";
        節日期 = 日期值轉換(曆法數據[YearData].寒露, 1);
        //距離節的天數=DateDiff(節日期,輸入西曆日期,"days");
        距離節的天數 = momentDateDiff(輸入西曆日期,節日期);
        下個節氣日期 = 日期值轉換(曆法數據[YearData].立冬, 1);
        上個節氣日期 = 日期值轉換(曆法數據[YearData].寒露, 1);
        //下個節氣時差=DateDiff(輸入西曆日期,下個節氣日期,"hours");
        //上個節氣時差=DateDiff(上個節氣日期,輸入西曆日期,"hours");
        下個節氣時差 = momentDateDiff(下個節氣日期, 輸入西曆日期, "hours");
        上個節氣時差 = momentDateDiff(輸入西曆日期, 上個節氣日期, "hours");
        本季末日 = 日期值轉換(曆法數據[YearData].霜降, 1);
        
        本季交節日 = new Date(上個節氣日期);
        本季交節日.setHours(0, 0, 0, 0); //去掉時間
        當天是交節日 = 輸入日期.valueOf() == 本季交節日.valueOf() ? true : false;

        干支年 = 干支滾動(立春年數, 0);
        干支月 = 干支滾動(立春月數, 8);
        干支日 = 干支滾動(立春日數, 距離立春日);

    } else if ((輸入西曆日期>=日期值轉換(曆法數據[YearData].霜降, 1)) && (輸入西曆日期<日期值轉換(曆法數據[YearData].立冬, 1))) {
        節氣 = "霜降";
		節氣數 = 17;
        節氣時段 = "霜降後，立冬前";
        節 = "寒露";
        節日期 = 日期值轉換(曆法數據[YearData].寒露, 1);
        //距離節的天數=DateDiff(節日期,輸入西曆日期,"days");
        距離節的天數 = momentDateDiff(輸入西曆日期, 節日期);

        下個節氣日期 = 日期值轉換(曆法數據[YearData].立冬, 1);
        上個節氣日期 = 日期值轉換(曆法數據[YearData].寒露, 1);
        //下個節氣時差=DateDiff(輸入西曆日期,下個節氣日期,"hours");
        //上個節氣時差=DateDiff(上個節氣日期,輸入西曆日期,"hours");
        下個節氣時差 = momentDateDiff(下個節氣日期, 輸入西曆日期, "hours");
        上個節氣時差 = momentDateDiff(輸入西曆日期, 上個節氣日期, "hours");
        本季末日 = 日期值轉換(曆法數據[YearData].立冬, 1);

        本季交節日 = new Date(下個節氣日期);
        本季交節日.setHours(0, 0, 0, 0); //去掉時間
        當天是交節日 = 輸入日期.valueOf() == 本季交節日.valueOf() ? true : false;
        干支年 = 干支滾動(立春年數, 0);
        干支月 = 干支滾動(立春月數, 8);
        干支日 = 干支滾動(立春日數, 距離立春日);

    } else if ((輸入西曆日期>=日期值轉換(曆法數據[YearData].立冬, 1)) && (輸入西曆日期<日期值轉換(曆法數據[YearData].小雪, 1))) {
        節氣 = "立冬";
		節氣數 = 18;
        節氣時段 = "立冬後，小雪前";
        節 = "立冬";
        節日期 = 日期值轉換(曆法數據[YearData].立冬, 1);
        //距離節的天數=DateDiff(節日期,輸入西曆日期,"days");
        距離節的天數 = momentDateDiff(輸入西曆日期, 節日期);
        下個節氣日期 = 日期值轉換(曆法數據[YearData].大雪, 1);
        上個節氣日期 = 日期值轉換(曆法數據[YearData].立冬, 1);
        //下個節氣時差=DateDiff(輸入西曆日期,下個節氣日期,"hours");
        //上個節氣時差=DateDiff(上個節氣日期,輸入西曆日期,"hours");
        下個節氣時差 = momentDateDiff(下個節氣日期, 輸入西曆日期, "hours");
        上個節氣時差 = momentDateDiff(輸入西曆日期, 上個節氣日期, "hours");
        本季末日 = 日期值轉換(曆法數據[YearData].小雪, 1);

        本季交節日 = new Date(上個節氣日期);
        本季交節日.setHours(0, 0, 0, 0); //去掉時間
        當天是交節日 = 輸入日期.valueOf() == 本季交節日.valueOf() ? true : false;

        干支年 = 干支滾動(立春年數, 0);
        干支月 = 干支滾動(立春月數, 9);
        干支日 = 干支滾動(立春日數, 距離立春日);

    } else if ((輸入西曆日期>=日期值轉換(曆法數據[YearData].小雪, 1)) && (輸入西曆日期<日期值轉換(曆法數據[YearData].大雪, 1))) {
        節氣 = "小雪";
		節氣數 = 19;
        節氣時段 = "小雪後，大雪前";
        節 = "立冬";
        節日期 = 日期值轉換(曆法數據[YearData].立冬, 1);
        //距離節的天數=DateDiff(節日期,輸入西曆日期,"days");
        距離節的天數 = momentDateDiff(輸入西曆日期, 節日期);

        下個節氣日期 = 日期值轉換(曆法數據[YearData].大雪, 1);
        上個節氣日期 = 日期值轉換(曆法數據[YearData].立冬, 1);
        //下個節氣時差=DateDiff(輸入西曆日期,下個節氣日期,"hours");
        //上個節氣時差=DateDiff(上個節氣日期,輸入西曆日期,"hours");
        下個節氣時差 = momentDateDiff(下個節氣日期, 輸入西曆日期, "hours");
        上個節氣時差 = momentDateDiff(輸入西曆日期, 上個節氣日期, "hours");
        本季末日 = 日期值轉換(曆法數據[YearData].大雪, 1);

        本季交節日 = new Date(下個節氣日期);
        本季交節日.setHours(0, 0, 0, 0); //去掉時間
        當天是交節日 = 輸入日期.valueOf() == 本季交節日.valueOf() ? true : false;

        干支年 = 干支滾動(立春年數, 0);
        干支月 = 干支滾動(立春月數, 9);
        干支日 = 干支滾動(立春日數, 距離立春日);

    } else if ((輸入西曆日期>=日期值轉換(曆法數據[YearData].大雪, 1)) && (輸入西曆日期<日期值轉換(曆法數據[YearData].冬至, 1))) {
        節氣 = "大雪";
		節氣數 = 20;
        節氣時段 = "大雪後，冬至前";
        節 = "大雪";
        節日期 = 日期值轉換(曆法數據[YearData].大雪, 1);
        //距離節的天數=DateDiff(節日期,輸入西曆日期,"days");
        距離節的天數 = momentDateDiff(輸入西曆日期, 節日期);
        下個節氣日期 = 日期值轉換(曆法數據[YearData+1].小寒, 1);
        上個節氣日期 = 日期值轉換(曆法數據[YearData].大雪, 1);
        //下個節氣時差=DateDiff(輸入西曆日期,下個節氣日期,"hours");
        //上個節氣時差=DateDiff(上個節氣日期,輸入西曆日期,"hours");
        下個節氣時差 = momentDateDiff(下個節氣日期, 輸入西曆日期, "hours");
        上個節氣時差 = momentDateDiff(輸入西曆日期, 上個節氣日期, "hours");
        本季末日 = 日期值轉換(曆法數據[YearData].冬至, 1);

        本季交節日 = new Date(上個節氣日期);
        本季交節日.setHours(0, 0, 0, 0); //去掉時間
        當天是交節日 = 輸入日期.valueOf() == 本季交節日.valueOf() ? true : false;

        干支年 = 干支滾動(立春年數, 0);
        干支月 = 干支滾動(立春月數, 10);
        干支日 = 干支滾動(立春日數, 距離立春日);

    } else if ((輸入西曆日期>=日期值轉換(曆法數據[YearData].冬至, 1)) && (輸入西曆日期<日期值轉換(曆法數據[YearData+1].小寒, 1))) {
        節氣 = "冬至";
		節氣數 = 21;
        節氣時段 = "冬至後，小寒前";
        節 = "大雪";
        節日期 = 日期值轉換(曆法數據[YearData].大雪, 1);
        //距離節的天數=DateDiff(節日期,輸入西曆日期,"days");
        距離節的天數 = momentDateDiff(輸入西曆日期, 節日期);
        下個節氣日期 = 日期值轉換(曆法數據[YearData+1].小寒, 1);
        上個節氣日期 = 日期值轉換(曆法數據[YearData].大雪, 1);
        //下個節氣時差=DateDiff(輸入西曆日期,下個節氣日期,"hours");
        //上個節氣時差=DateDiff(上個節氣日期,輸入西曆日期,"hours");
        下個節氣時差 = momentDateDiff(下個節氣日期, 輸入西曆日期, "hours");
        上個節氣時差 = momentDateDiff(輸入西曆日期, 上個節氣日期, "hours");
        本季末日 = 日期值轉換(曆法數據[YearData+1].小寒, 1);

        本季交節日 = new Date(下個節氣日期);
        本季交節日.setHours(0, 0, 0, 0); //去掉時間
        當天是交節日 = 輸入日期.valueOf() == 本季交節日.valueOf() ? true : false;

        干支年 = 干支滾動(立春年數, 0);
        干支月 = 干支滾動(立春月數, 10);
        干支日 = 干支滾動(立春日數, 距離立春日);
    }

    時支 = 時間轉換地支(輸入時間, 1); //早子，丑，寅 ...... 夜子
    時柱 = 時柱判斷(六十干支屬性(干支日,1).substr(0,1), 時支);
    干支時 = 六十干支字轉值(時柱);
    if(Number(西曆秒)==1) {
        時支="-";
        時柱="--";
        干支時="--";
    }

    距離節的天數++; //調整多一天

    var 干支曆數據 = [];
    var 干支曆 = 六十干支屬性(干支年,1) + 六十干支屬性(干支月,1) + 六十干支屬性(干支日,1) + 時柱;
    var 交節日字串 = 當天是交節日 ? "（交節日）" : "";
    var 生肖 = 地支字轉生肖(六十干支屬性(干支年,1).substr(1,1));
	
    干支曆數據 = [干支曆, 干支年, 干支月, 干支日, 干支時, 生肖, 節氣, 交節日字串, 上個節氣時差, 下個節氣時差, 節, 節日期, 距離節的天數, 節氣數];
    // **********************************************************************************
   
    // ************************ 農曆、陰曆 計算模塊 **************************************
        function 農曆計算(計算的西曆,計算年份數據){
            // External Scripts/Data： DateDiff、曆法數據、正月初一日期
            //距離初一天數 = DateDiff(正月初一日期, 計算的西曆, "days");
            距離初一天數 = momentDateDiff(計算的西曆, 正月初一日期);
            閏月字串 = "";
            算出月 = 1; //正月
            算出日 = 1; //初一
            DayCounter = 0;
            當月天數 = 29+Number(曆法數據[計算年份數據].大小月.substr(算出月-1,1));
             
            while(DayCounter<距離初一天數){
                if (算出日<當月天數){
                    算出日 += 1;
                }
                else if(算出月 ==曆法數據[計算年份數據].閏月){
                    算出日 = 1;
                    當月天數=曆法數據[計算年份數據].閏月天數;
                    閏月字串 = "（閏）";
                    DayCounter += 1;
                    while(DayCounter < 距離初一天數 && 算出日<當月天數){
                        DayCounter += 1;
                        算出日 += 1;
                    }
                    if(DayCounter<距離初一天數){
                        算出月 += 1;
                        算出日 = 1;
                        當月天數 = 29+Number(曆法數據[計算年份數據].大小月.substr(算出月-1,1));
                        閏月字串 = "";
                    }
                }
                else {
                    算出月 += 1;
                    算出日 = 1;
                    當月天數 = 29+Number(曆法數據[計算年份數據].大小月.substr(算出月-1,1));
                }
                DayCounter += 1;
            }  // emd while
            
            算出年 = 計算年份數據 + 1923;
            //var TestStr;
            //TestStr = "年：" + 算出年 + " 月:" + 算出月 + " 日:" + 算出日;
            //alert(TestStr);
            var 計算結果 = [];
            計算結果 = [算出年,算出月,算出日,閏月字串];
            return 計算結果;
        }  //end function 農曆計算
    
    // ********************************** 農曆計算 **************************************
    var 算出年, 算出月, 算出日,距離初一天數, 閏月字串, 當月天數, DayCounter;
    var 農曆計算年份=輸入日期.valueOf()>=日期值轉換(曆法數據[YearData].初一西曆, 2).valueOf() ? YearData:YearData-1;
    var 正月初一日期 = 日期值轉換(曆法數據[農曆計算年份].初一西曆, 2);

    var 農曆計算結果 = 農曆計算(輸入日期,農曆計算年份);
    var 農曆年 = 農曆計算結果[0];
    var 農曆月 = 農曆計算結果[1];
    var 農曆日 = 農曆計算結果[2];
    var 農曆閏月字 = 農曆計算結果[3];
    var 農曆時;
    
    if (時支=="-") 農曆時=""; else 農曆時=時支 + "時";
    var 農曆日期 = 農曆年 + "（"+ 六十干支屬性(干支年,1) + "）年" + 農曆閏月字 + 農曆月 + "月" + 農曆日 + "日" + 農曆時;
    var 農曆數據 = [日期值轉換(曆法數據[YearData].立春, 1)];
    
    var 中氣日期, 命宮生月數;
    
    switch(農曆月) {
    　　//八字命宮應該嚴格按照太陽的相對運動來確定命宮的宮位，所以以上的起法就會有些偏差。校正方法：
    　　//正月太陽在子宮，雨水后第五天進入亥宮，以二月安命；
    　　//二月太陽在亥宮，春分后第七天進入戌宮，以三月安命；
    　　//三月太陽在戌宮，谷雨后第九天進入酉宮，以四月安命；
    　　//四月太陽在酉宮，小滿后第十天進入申宮，以五月安命；
    　　//五月太陽在申宮，夏至后第九天進入未宮，以六月安命；
    　　//六月太陽在未宮，大暑后第八天進入午宮，以七月安命；
    　　//七月太陽在午宮，處暑后第九天進入巳宮，以八月安命；
    　　//八月太陽在巳宮，秋分后第11天進入辰宮，以九月安命；
    　　//九月太陽在辰宮，霜降后第13天進入卯宮，以十月安命；
    　　//十月太陽在卯宮，小雪后第12天進入寅宮，以冬月安命；
    　　//冬月太陽在寅宮，冬至后第八天進入丑宮，以臘月安命；
    　　//臘月太陽在丑宮，大寒后第五天進入子宮，以正月安命。
      
        case 1: //正月
            中氣日期=日期值轉換(曆法數據[YearData].雨水, 1);
            中氣日期.setDate(中氣日期.getDate() + 5);
            命宮生月數=(輸入西曆日期>=中氣日期) ? 2 : 1;
            break;
        case 2:
            中氣日期=日期值轉換(曆法數據[YearData].春分, 1);
            中氣日期.setDate(中氣日期.getDate() + 7);
            命宮生月數=(輸入西曆日期>=中氣日期) ? 3 : 2;
            break;
        case 3:
            中氣日期 = 日期值轉換(曆法數據[YearData].穀雨, 1);
            中氣日期.setDate(中氣日期.getDate() + 9);

            命宮生月數 = (輸入西曆日期 >= 中氣日期) ? 4 : 3;
            break;
        case 4:
            中氣日期=日期值轉換(曆法數據[YearData].小滿, 1);
            中氣日期.setDate(中氣日期.getDate() + 10);
            命宮生月數=(輸入西曆日期>=中氣日期) ? 5 : 4;
            
            break;
        case 5:
            中氣日期=日期值轉換(曆法數據[YearData].夏至, 1);
            中氣日期.setDate(中氣日期.getDate() + 9);
            命宮生月數=(輸入西曆日期>=中氣日期) ? 6 : 5;
            break;
        case 6:       
            中氣日期=日期值轉換(曆法數據[YearData].大暑, 1);
            中氣日期.setDate(中氣日期.getDate() + 8);
            命宮生月數=(輸入西曆日期>=中氣日期) ? 7 : 6;
            break;
        case 7:            
            中氣日期=日期值轉換(曆法數據[YearData].處暑, 1);
            中氣日期.setDate(中氣日期.getDate() + 9);
            命宮生月數=(輸入西曆日期>=中氣日期) ? 8 : 7;
            break;
        case 8: 
            中氣日期=日期值轉換(曆法數據[YearData].秋分, 1);
            中氣日期.setDate(中氣日期.getDate() + 11);
            命宮生月數=(輸入西曆日期>=中氣日期) ? 9 : 8;
            break;
        case 9: 
            中氣日期=日期值轉換(曆法數據[YearData].霜降, 1);
            中氣日期.setDate(中氣日期.getDate() + 13);
            命宮生月數=(輸入西曆日期>=中氣日期) ? 10 : 9;
            break;
        case 10: 
            中氣日期=日期值轉換(曆法數據[YearData].小雪, 1);
            中氣日期.setDate(中氣日期.getDate() + 12);
            命宮生月數=(輸入西曆日期>=中氣日期) ? 11 : 10;
            break;
        case 11: 
            中氣日期=日期值轉換(曆法數據[YearData].冬至, 1);
            中氣日期.setDate(中氣日期.getDate() + 8);
            命宮生月數=(輸入西曆日期>=中氣日期) ? 12 : 11;
            break;
        case 12: 
            中氣日期=日期值轉換(曆法數據[YearData+1].大寒, 1);
            中氣日期.setDate(中氣日期.getDate() + 5);
            命宮生月數=(輸入西曆日期>=中氣日期) ? 1 : 12;
            break; 
    }
    
    農曆數據 = [農曆日期,農曆年,農曆月,農曆日,時支,農曆閏月字,六十干支屬性(干支年,1),命宮生月數];

    
    // ********************************** 陰曆計算 **************************************
    var 陰曆輸入日期,陰曆干支年, 陰曆月, 陰曆日, 陰曆時支;
    陰曆輸入日期 = new Date(輸入日期.valueOf());
    陰曆干支年=干支年;
    陰曆時支 = 時支;

    if (陰曆時支 == "早子") { 陰曆時支 = "子"; }
    if (陰曆時支 == "夜子") {
        陰曆輸入日期.setDate(陰曆輸入日期.getDate() + 1); //夜子輸入日期加多一天
        陰曆時支 = "子";
    }

    var NLYearData = 陰曆輸入日期.getFullYear() - 1923;
    var 陰曆計算年份=陰曆輸入日期.valueOf()>=日期值轉換(曆法數據[NLYearData].初一西曆, 2).valueOf() ? NLYearData:NLYearData-1;
    var 正月初一日期 = 日期值轉換(曆法數據[陰曆計算年份].初一西曆, 2);

    var 陰曆計算結果 = 農曆計算(陰曆輸入日期,陰曆計算年份);
    var 陰曆年 = 陰曆計算結果[0];
    var 陰曆月 = 陰曆計算結果[1];
    var 陰曆日 = 陰曆計算結果[2];
    var 陰曆閏月字 = 陰曆計算結果[3];

    if (陰曆月==12) {
        陰曆干支年 = 干支滾動(陰曆干支年, -1); //立春後，但農曆還在十二月份，干支退1
    }
    
    var 陰時;
    if(陰曆時支=="-") 陰時=""; else 陰時=陰曆時支 + "時";
    var 陰曆日期 = 六十干支屬性(陰曆干支年,1)+"年" + 陰曆閏月字 + 陰曆月 + "月" + 陰曆日 + "日" + 陰時;
    var 陰曆數據 = [];
    陰曆數據 = [陰曆日期,陰曆年,陰曆月,陰曆日,陰曆時支,陰曆閏月字,六十干支屬性(陰曆干支年,1)];

    /** Debug Script to verify 干支曆法 Calculation
    var GZStr = "輸入日期:" +輸入日期.toDateString()+"\n干支曆法："+六十干支屬性(干支年,1) + "," + 六十干支屬性(干支月,1) + "," + 六十干支屬性(干支日,1);
    var Season = "\n節氣時段：" + 節氣時段 + "\n本季交節日: " + 本季交節日.toDateString() + "\n本季末日: " + 本季末日.toDateString() + " " + 本季末日.toTimeString();
    var SeasonDate = "\n上個節氣日期: " + 上個節氣日期.toDateString() + " "  + 上個節氣日期.toTimeString() + "\n下個節氣日期: " + 下個節氣日期.toDateString() + " " + 下個節氣日期.toTimeString();
    var SeasonDiffHour = "\n上個節氣時差: " + 上個節氣時差+ "小時，下個節氣時差: " + 下個節氣時差 + "小時：";
    var IsJiaoJieRi = "\n當天是交節日：" + 當天是交節日;
    return (GZStr + Season + SeasonDate + SeasonDiffHour + IsJiaoJieRi);
    alert(GZStr + Season + SeasonDate + SeasonDiffHour + IsJiaoJieRi);

    var StartDate = "正月初一:" + 正月初一日期 + "\n" + "距離初一天數:" + 距離初一天數 + "天\n";
    var NongLiDate = "農曆："+農曆年 + "-" + 閏月字串+農曆月 + "-" + 農曆日;
    var TestStr = StartDate + NongLiDate;
    alert(TestStr);
    **/

    var 輸出曆法數據=[];
    輸出曆法數據 = [干支曆數據, 農曆數據, 陰曆數據];
    return 輸出曆法數據;
}


function 農曆轉換西曆(輸入農曆日期字串,是否閏月) {
    /**
    輸入農曆日期字串：YYYYMMDDhhmmss, 年(4)月(2)日(2)
    return: a valid western date corresponding to the input 農曆日期
    **/

    var 曆法數據 = 萬年曆();

    var 農曆年 = 輸入農曆日期字串.substr(0, 4);
    var 農曆月 = Number(輸入農曆日期字串.substr(4, 2));
    var 農曆日 = Number(輸入農曆日期字串.substr(6, 2));
    //var 農曆時數 = 輸入農曆日期字串.substr(8, 2)+":"+輸入農曆日期字串.substr(10, 2)+":"+輸入農曆日期字串.substr(12, 2);
    var 閏月否 = 是否閏月;
    var YearData = 農曆年 - 1923;
    var 閏月份=曆法數據[YearData].閏月;
    var 正月初一日期 = 日期值轉換(曆法數據[YearData].初一西曆, 2);
    //var 大小月天數=曆法數據[YearData].大小月;
    var 當月天數 = 29+Number(曆法數據[YearData].大小月.substr(農曆月-1,1));
    var LeapMonthStr = "";

    if((閏月否) && (農曆月 !=曆法數據[YearData].閏月)) {
        alert("輸入農曆不正確，"+農曆月+"月份並非閏月！！");
        return "";
    }

    if((閏月否) && (農曆月 ==曆法數據[YearData].閏月)) {
        當月天數 = 曆法數據[YearData].閏月天數;
        LeapMonthStr = "閏";
    }

    if(當月天數<農曆日){
        alert("輸入農曆不正確，"+LeapMonthStr+農曆月+"月的天數只有"+當月天數+"天！！");
        return "";        
    }

    var 距離初一的天數 = 0;
    switch (true) {
        case (!閏月否):
            for (var i = 1; i < 農曆月; i++) {
                距離初一的天數 =距離初一的天數 + 29 + Number(曆法數據[YearData].大小月.substr(i - 1, 1));
            }
            距離初一的天數=距離初一的天數+農曆日-1;
            if((曆法數據[YearData].閏月>0) && (農曆月>曆法數據[YearData].閏月)){
                距離初一的天數+=曆法數據[YearData].閏月天數; //如果當年有閏月，且輸入的農曆月份大於閏月，再加入閏月的天數
            }
            break;
        case (閏月否 && (農曆月 == 曆法數據[YearData].閏月)):
            for (var i = 1; i <= 農曆月; i++) {
                距離初一的天數 = 距離初一的天數 + 29 + Number(曆法數據[YearData].大小月.substr(i - 1, 1));
            }
            距離初一的天數 = 距離初一的天數 + 農曆日 - 1;
            break;
    }

    var 西曆日期 = new Date(正月初一日期.valueOf());
    西曆日期.setDate(西曆日期.getDate()+距離初一的天數);
    return 西曆日期;

    //var NLInputDate = "農曆年:" + 農曆年 + "\n農曆月:" + 農曆月 + "\n農曆日:" + 農曆日 + "\n閏月否:" + 閏月否;
    //alert(西曆日期);
}

function 干支曆轉換(輸入干支日期) {
    /**
    曆法轉換：輸入干支日期, 年柱月支日柱時柱，甲子乙丑丙寅丁卯
    **/
    var 曆法數據 = 萬年曆();
    var 干支日期=輸入干支日期.substr(0,6);
    //var 干支日期 = "壬子戊申壬辰乙巳";
    var 干支日期=干支日期.substr(0,6);
    var 年柱=干支日期.substr(0,2);
    var 年柱數 = 六十干支字轉值(年柱);
    var 月柱=干支日期.substr(2,2);
    var 月支=干支日期.substr(3,1);
    var 日柱=干支日期.substr(4,2);
    var 日干=日柱.substr(0,1);
    var 日柱數 = 六十干支字轉值(日柱);
    var ArrayCounter = 0; // this is to track no. of correct date been added to output array, can not used for's counter, because the 1st date could be invalid
    var 時支=輸入干支日期.substr(7,1);
    var 時柱=輸入干支日期.substr(6,2);
    var EvaluatedTime; //西曆時數, Hour

    if (isNaN(年柱數)) { //if (!Number.isInteger(年柱數)) {
        alert("輸入年柱干支錯誤！！");
        干支輸入正確 = false;
        return 干支輸入正確;
    }

    if (isNaN(日柱數))  { //if (!Number.isInteger(日柱數)) { if (parseInt(日柱數)===NaN)
        alert("輸入日柱干支錯誤！！");
        干支輸入正確 = false;
        return 干支輸入正確;
    }

    var 西曆年份 = 1923 + 年柱數;
    var 日期矩陣 = [];
    
    function 年月支尋節氣日期(年,月支){
        //輸入年份（西曆）和生月干，找出該日期的節氣日主
        var YearData = 年 - 1923;
        var 節氣日期;

        switch(月支){
            case "寅":  //正月
                節氣日期 = 曆法數據[YearData].立春;
                break;
            case "卯":  //二月
                節氣日期 = 曆法數據[YearData].驚蟄;
                break;
            case "辰":  //三月
                節氣日期 = 曆法數據[YearData].清明;
                break;
            case "巳":  //四月
                節氣日期 = 曆法數據[YearData].立夏;
                break;
            case "午":  //午月
                節氣日期 = 曆法數據[YearData].芒種;
                break;
            case "未":  //六月
                節氣日期 = 曆法數據[YearData].小暑;
                break;
            case "申":  //七月
                節氣日期 = 曆法數據[YearData].立秋;
                break;
            case "酉":  //八月
                節氣日期 = 曆法數據[YearData].白露;
                break;
            case "戌":  //九月
                節氣日期 = 曆法數據[YearData].寒露;
                break;
            case "亥":  //十月
                節氣日期 = 曆法數據[YearData].立冬;
                break;
            case "子":  //十一月
                節氣日期 = 曆法數據[YearData].大雪;
                break;
            case "丑":  //十二月
                節氣日期 = 曆法數據[YearData+1].小寒;
                break;
        }

        return 日期值轉換(節氣日期,1); //該節氣的日期和時間
    }
    
    for (var i = 0; 西曆年份 <= new Date().getFullYear()+3; i++) {
        var 節氣日期 = 年月支尋節氣日期(西曆年份, 月支);
        var 節氣曆法數據 = 西曆轉換(節氣日期);
        var 節氣干支曆 = 節氣曆法數據[0][0];
        var 節氣月柱 = 節氣干支曆.substr(2, 2);
        var 節氣日柱 = 節氣干支曆.substr(4, 2);
        var 節氣日柱數 = 六十干支字轉值(節氣日柱);
        var 是否交節日 = 干支日期==節氣干支曆.substr(0,6) ? true : false;
        var 交節時=節氣干支曆.substr(7,1)+"時";
        var 干支輸入正確 = true; //預設輸入的干支日期是正確的
        //var TestStr = "\n 干支日期：" + 干支日期 + "\n 節氣干支曆:" + 節氣干支曆;
        //alert("是否交節日:" + 是否交節日+TestStr);

        if(月柱 != 節氣月柱){
            alert("輸入月柱干支錯誤，"+西曆年份+"，"+年柱+"年，"+月支+"月的干支是"+節氣月柱);
            干支輸入正確 = false;     
        }

        var 日差數 = 日柱數 - 節氣日柱數 >= 0 ? 日柱數 - 節氣日柱數 : 日柱數 - 節氣日柱數 + 60;
        var 預算日期 = new Date(節氣日期.valueOf());
        預算日期.setDate(預算日期.getDate() + 日差數);

        
        //預算日期.setHours(v.getHours() + 1);
        預算日期.setMinutes(預算日期.getMinutes() + 1);
        var 預算日期數據=西曆轉換(預算日期);
        var 預算日期干支曆 = 預算日期數據[0][0];
        if (干支日期!=預算日期干支曆.substr(0,6)) {
            //alert("輸入日柱並不在"+西曆年份+"，"+月柱+"月內！！");
            干支輸入正確 = false;
            預算日期=null;
        }

        // 確定時柱正確 ！！
        if(干支輸入正確){ //如果輸入的年、月、日正確，計算時柱
            if(時支!="子"){
            var 預算時柱 = 時柱判斷(日干, 時支);
                if (預算時柱==時柱){
                    EvaluatedTime = 地支字轉換時數(時支);
                }
                else {
                    alert("輸入的時柱不正確，"+年柱+月柱+日柱+"，"+時支+"時的時柱是"+預算時柱);
                    干支輸入正確 = false;      
                }
            }
            else if(時支=="子"){
                var 預算早子時柱=時柱判斷(日干, "早子");
                var 預算夜子時柱=時柱判斷(日干, "夜子");

                switch(true) {
                    case (預算早子時柱 == 時柱):
                        EvaluatedTime = 地支字轉換時數("早子");
                        break;
                    case (預算夜子時柱 == 時柱):
                        EvaluatedTime = 地支字轉換時數("夜子");
                        break;
                    case ((預算早子時柱 != 時柱) && (預算夜子時柱 != 時柱)):
                        alert("輸入的時柱不正確，" + 年柱 + 月柱 + 日柱 + "，" + 時支 + "時的時柱是" + 預算早子時柱 + "或" + 預算夜子時柱);
                        干支輸入正確 = false;
                        break;
                }
            }
        }
        // var d = new Date(year, month, day, hours, minutes, seconds, milliseconds);
        
        if (干支輸入正確) { //如果輸入的年、月、日正確，計算時柱
            var 預算西曆 = new Date(預算日期.getFullYear(), 預算日期.getMonth(), 預算日期.getDate(), EvaluatedTime, 0, 0, 0);
            var 預算終檢 = 西曆轉換(預算西曆);
            var 預算終檢干支曆 = 預算終檢[0][0];
            var 西曆時數 = zeroPad(EvaluatedTime, 2) + ":00:00";

            if (預算終檢干支曆==輸入干支日期){
                日期矩陣[ArrayCounter] = new 西曆日期模塊(預算日期.getFullYear(), 預算西曆.getMonth()+1, 預算西曆.getDate(), 西曆時數);

                ArrayCounter += 1;
                //alert("節氣日期:"+節氣日期 +"\n節氣干支曆："+節氣干支曆 +"\n日差數："+日差數 +"\n西曆："+預算西曆.toDateString()+" "+日期矩陣[i].時辰 + "時");
            }
            else {
                var ValidationStr = "\n 輸入八字：" + 輸入干支日期 + "\n 逆算八字：" + 預算終檢干支曆;
                if (是否交節日) {
                    var ValidationJiaoJie="\n 輸入的八字當天為交節日，交節時為"+ 交節時;
                    alert(" 留意輸入的八字，"+ValidationJiaoJie+ValidationStr);
                    日期矩陣[ArrayCounter] = new 西曆日期模塊(預算日期.getFullYear(), 預算西曆.getMonth()+1, 預算西曆.getDate(), 西曆時數);
                    ArrayCounter += 1;
                    //alert("節氣日期:"+節氣日期 +"\n節氣干支曆："+節氣干支曆 +"\n日差數："+日差數 +"\n西曆："+預算西曆.toDateString()+" "+日期矩陣[i].時辰 + "時");
                }
                else {
                   alert("輸入的八字有問題！！"); 
                }
            }
        }
        西曆年份 += 60;
     }
    
    return 日期矩陣;
}


function 日光節約(輸入年份, 國家){
    var 日光節約="";
    var 年份=Number(輸入年份);
    if((年份>=1945 && 年份<=1979) && 國家=="台灣"){  //台灣這段日子有日光節約
        switch(true){
            case (年份>=1945 && 年份<=1951):
                日光節約="夏令：5月1日 - 9月30日";
                break;
            case (年份==1952):
                日光節約="日光節約：3月1日 - 10月31日";
                break;
            case (年份>=1953 && 年份<=1954):
                日光節約="日光節約：4月1日 - 10月31日";
                break;
            case (年份>=1955 && 年份<=1956):
                日光節約="日光節約：4月1日 - 9月30日";
                break;
            case (年份>=1957 && 年份<=1959):
                日光節約="夏令：4月1日 - 9月30日";
                break;
            case (年份>=1960 && 年份<=1961):
                日光節約="夏令：6月1日 - 9月30日";
                break;
            case (年份>=1962 && 年份<=1973):
                日光節約="";
                break;
             case (年份>=1974 && 年份<=1975):
                日光節約="日光節約：4月1日 - 9月30日";
                break;
            case (年份>=1976 && 年份<=1978):
                日光節約="";
                break;
            case (年份==1979):
                日光節約="日光節約：7月1日 - 9月30日";
                break;
        } //end switch
    } // end if 台灣
    return 日光節約;
}


//****************** **************************

